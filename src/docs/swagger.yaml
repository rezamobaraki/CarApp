basePath: /api/
definitions:
  dto.GetUserRequest:
    properties:
      mobile_number:
        maxLength: 11
        minLength: 11
        type: string
    required:
    - mobile_number
    type: object
  handlers.personData:
    properties:
      first_name:
        maxLength: 10
        minLength: 4
        type: string
      last_name:
        maxLength: 20
        minLength: 6
        type: string
      mobile_number:
        maxLength: 11
        minLength: 11
        type: string
    required:
    - first_name
    - last_name
    - mobile_number
    type: object
  helper.BaseHttpResponse:
    properties:
      error: {}
      result: {}
      resultCode:
        $ref: '#/definitions/helper.ResultCode'
      success:
        type: boolean
      validationErrors:
        items:
          $ref: '#/definitions/validations.ValidationError'
        type: array
    type: object
  helper.ResultCode:
    enum:
    - 0
    - 40001
    - 40101
    - 40301
    - 40401
    - 42901
    - 42902
    - 50001
    - 50002
    type: integer
    x-enum-varnames:
    - Success
    - ValidationError
    - AuthError
    - ForbiddenError
    - NotFoundError
    - LimiterError
    - OtpLimiterError
    - CustomRecovery
    - InternalError
  validations.ValidationError:
    properties:
      message:
        type: string
      property:
        type: string
      tag:
        type: string
      value:
        type: string
    type: object
host: localhost:5005
info:
  contact:
    email: rezam578@gmail.com
    name: Reza Mobaraki
    url: https://linkedin.com/in/reza-mobaraki
  description: This is a sample Golang server CarApp server with gin
  title: CarApp API
  version: "1.0"
paths:
  /v1/health/:
    get:
      consumes:
      - application/json
      description: Check the health of the service
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed to validate the request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "500":
          description: internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.BaseHttpResponse'
            - properties:
                Error:
                  items: {}
                  type: array
              type: object
      summary: Health check
      tags:
      - Health
  /v1/test/binder/body/:
    post:
      consumes:
      - application/json
      description: BodyBinder
      parameters:
      - description: person data
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/handlers.personData'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/helper.BaseHttpResponse'
            - properties:
                validationErrors: {}
              type: object
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: BodyBinder
      tags:
      - Test
  /v1/test/binder/uri/{id}/{name}/:
    post:
      consumes:
      - application/json
      description: BodyBinder
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: username
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/helper.BaseHttpResponse'
            - properties:
                validationErrors: {}
              type: object
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: BodyBinder
      tags:
      - Test
  /v1/test/user/{id}/:
    get:
      consumes:
      - application/json
      description: UserById
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: UserById
      tags:
      - Test
  /v1/users/send-otp/:
    post:
      consumes:
      - application/json
      description: Send OTP to user
      parameters:
      - description: User details for OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: Send OTP
      tags:
      - User
schemes:
- http
securityDefinitions:
  AuthBearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
